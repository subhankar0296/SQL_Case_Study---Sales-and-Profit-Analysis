create database Case_Study_1
use Case_Study_1

select * from dbo.fact
select * from dbo.Product
select * from dbo.Location

--  1. Display the number of states present in theLocationTable.
SELECT COUNT(DISTINCT State) AS NumberOfStates FROM Location;


--  2. Howmany products are of regular type?
select count(*) as RegularType from Product where type = 'Regular';


--  3. Howmuch spending has been done on marketing of product ID1?
select SUM(Marketing) as TotalMarketingSpending
from dbo.fact
where ProductId = 1;


--  4. What is the minimum sales of a product?
SELECT MIN(sales) AS MinimumSales FROM Fact;


SELECT P.Product, F.sales
FROM product P
JOIN Fact F ON P.ProductID = F.ProductID
WHERE F.sales = (SELECT MIN(sales) FROM Fact);



--  5. Display the max Cost of Good Sold (COGS).
select MAX(COGS) MaxCOGS from Fact;


--  6. Display the details of the product where product type iscoffee.
select * from product where product_type = 'Coffee';


--  7. Display the details where total expenses are greater than40.
select * from fact where total_expenses > 40;


--  8. What is the average sales in area code 719?
Select AVG(sales) Avg_sales from fact where area_code = 719;


--  9. Find out the total profit generated by Colorado state.
select SUM(profit) as Total_Profit from fact F 
join Location L on F.area_code=L.area_code where state='Colorado';


-- 10.  Display the average inventory for each product ID.
select Productid, avg(Inventory) as Avg_Inventory
from fact group by Productid order by Productid;


-- 11.  Display state in a sequential order in a LocationTable.
select distinct state from location order by state;


-- 12. Display the average budget of the Product where the average budget margin should be greater than 100.
select P.product, AVG(Budget_Profit) as Avg_BudgetProfit, AVG(Budget_Margin) as Avg_Avg_BudgetMargin
from Fact F join Product P on F.productid=P.productid
group by P.product having avg(Budget_Margin) > 100;


-- 13. What is the total sales done on date 2010-01-01?
select SUM(sales) Total_Sales from fact where date = '2010-01-01';


-- 14.  Display the average total expense of each product ID on an individual date.
select Productid, Date, AVG(Total_Expenses) as Avg_Expenses
from fact group by productid, date order by Productid;


-- 15. Display the table with the following attributes such as date, productID,product_type, product, sales, profit, state, area_code.
select date, P.productID,product_type, product, sales, profit, state, L.area_code 
from Product P
join fact F on P.productid=F.productid join Location L on F.area_code=L.area_code;


-- 16. Display the rank without any gap to show the sales wiserank.
select Sales, Dense_rank() over (order by sales desc) as Sales_Rank from fact;


 -- 17. Find the state wise profit and sales.
select  State, sum(Profit) as Total_Profit, sum(Sales) as Total_Sales from fact F 
join Location L on F.Area_Code=L.Area_Code group by state;


-- 18.  Find the state wise profit and sales along with the productname.
select  State, product, sum(Profit) as Total_Profit, sum(Sales) as Total_Sales 
from product P 
join fact F on P.productid=F.productid
join Location L on F.Area_Code=L.Area_Code group by state, product order by state;


--  19. If there is an increase in sales of 5%, calculate the increased sales.
create function Increased_sale(@sale float)
returns float
as
BEGIN
return @Sale + (@sale * 5/100)
END;

select product, sales, DBO.increased_sale(sales) as Increased_Sales from fact F
join Product P on P.productid=F.productid;


-- 20.  Find the maximum profit along with the product ID and producttype.

SELECT Top 1 F.productid, P.Product, P.Product_type, F.profit AS Max_profit
FROM fact F JOIN product P ON F.productid = P.productid ORDER BY F.profit DESC;



-- 21. Create a stored procedure to fetch the result according to theproduct type from ProductTable.
Alter procedure ProductType @type varchar (50)
as
select product, product_type from Product where product_type=@type

exec ProductType coffee


-- 22. Write a query by creating a condition in which if the total expenses is less than 60 then it is a profit or else loss.
select *, case
	when Total_Expenses <60 then 'It is a profit'
	else 'It is a loss'
	end as Risk_Calculation
	from fact

	select * from fact


	-- 23. Give the total weekly sales value with the date and product ID details. Use roll-up to pull the data in hierarchical order
	SELECT DATEPART(WEEK, Date) AS Week_Number, Date, ProductID, SUM(Sales) AS Total_Weekly_Sales
FROM  fact GROUP BY ROLLUP (DATEPART(WEEK, Date), Date, ProductID)
ORDER BY Week_Number, Date,ProductID;


-- 24.  Apply union and intersection operator on the tables which consistof attribute area code.
select Area_code from location
union
Select Area_code from Fact


select Area_code from location
intersect
Select Area_code from Fact



-- 25.  Create a user-defined function for the product table to fetch aparticular product type based upon the user’s preference.
Create function Product_Type(@type varchar (100))
Returns table
as
Return
(
select product_type, product from Product where product_type = @type
)

select * from Product_Type ('coffee')



-- 26.  Change the product type from coffee to tea where product ID is 1 and undo it.
Begin Tran
update product
set product_type = 'Tea' where productid = 1

select * from product

rollback

select * from product



-- 27. Display the date, product ID and sales where total expensesar between 100 to 200.
SELECT Date, ProductID, Sales FROM fact WHERE 
total_Expenses BETWEEN 100 AND 200 order by productid;


-- 28.  Delete the records in the Product Table for regulartype.
Delete from product where Type = 'Regular';

select * from product;


-- 29.  Display the ASCII value of the fifth character from the column Product.
SELECT Product, ASCII(SUBSTRING(Product, 5, 1)) AS Fifth_Char_ASCII FROM Product;
